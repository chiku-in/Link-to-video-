import requests
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler

API_URL = "https://your-deployed-domain.com/download"
REQUIRED_CHANNELS = ["@yourchannel1", "@yourchannel2"]  # <-- अपने चैनल के यूजरनेम डालें

# यूजर के चैनल में सदस्यता की जांच करें
async def is_user_subscribed(user_id, context):
    for channel in REQUIRED_CHANNELS:
        try:
            member = await context.bot.get_chat_member(chat_id=channel, user_id=user_id)
            if member.status in ['left', 'kicked']:
                return False
        except Exception:
            return False
    return True

# /start कमांड हैंडलर
async def start(update: ContextTypes.DEFAULT_TYPE, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not await is_user_subscribed(user_id, context):
        keyboard = [
            [InlineKeyboardButton("🔗 Join Channel 1", url="https://t.me/yourchannel1")],
            [InlineKeyboardButton("🔗 Join Channel 2", url="https://t.me/yourchannel2")],
            [InlineKeyboardButton("✅ I've Joined", callback_data="check_sub")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "⛔ बॉट का इस्तेमाल करने से पहले दोनों चैनल को जॉइन करें:",
            reply_markup=reply_markup
        )
        return
    await update.message.reply_text("✅ Welcome! Send a TeraBox link to get download/watch options.")

# CallbackQueryHandler के लिए "I've Joined" बटन की जांच
async def check_subscription(update: ContextTypes.DEFAULT_TYPE, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    if await is_user_subscribed(user_id, context):
        await query.edit_message_text("✅ धन्यवाद! अब आप बॉट का इस्तेमाल कर सकते हैं।\nअब कोई भी TeraBox लिंक भेजें।")
    else:
        await query.edit_message_text("❌ आप अभी तक दोनों चैनल को जॉइन नहीं किए हैं। पहले जॉइन करें।")

# यूजर के लिंक हैंडलर में भी चैनल चेक (optional, बेहतर सिक्योरिटी के लिए)
async def handle_link(update: ContextTypes.DEFAULT_TYPE, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not await is_user_subscribed(user_id, context):
        await update.message.reply_text("⛔ कृपया पहले दोनों चैनल को जॉइन करें।")
        return

    try:
        res = requests.post(API_URL, json={"url": update.message.text})
        resp = res.json()
        if resp.get("status") == "success":
            info = resp["data"]
            buttons = [
                [InlineKeyboardButton("▶️ Watch", url=info["resolutions"].get("HD Video"))],
                [InlineKeyboardButton("⬇️ Download", url=info["resolutions"].get("Fast Download"))]
            ]
            await update.message.reply_photo(
                photo=info["thumbnail"],
                caption=f"🎬 {info['title']}",
                reply_markup=InlineKeyboardMarkup(buttons)
            )
        else:
            await update.message.reply_text("Error: " + resp.get("message", "Unknown"))
    except Exception:
        await update.message.reply_text("Failed to fetch video.")

app = Application.builder().token("YOUR_BOT_TOKEN").build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CallbackQueryHandler(check_subscription, pattern="check_sub"))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_link))
app.run_polling()
